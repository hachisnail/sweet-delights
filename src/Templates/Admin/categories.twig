{% extends "Layouts/admin.twig" %} {# Assumes 'Layouts/admin.twig' is your admin layout #}

{# This macro recursively renders the category tree #}
{% macro render_categories(categories, level = 0, app_url) %}
  {% import _self as macros %}
  <ul class="{{ level > 0 ? 'ml-6 border-l border-pink-200 pl-4' : 'space-y-3' }}">
    {% for category in categories %}
      <li class="p-3 bg-white rounded-lg shadow-sm flex justify-between items-center">
        <div class="font-medium text-[#835234]">
          {{ category.name }}
          <span class="text-xs text-gray-400">(ID: {{ category.id }})</span>
        </div>
        <div class="flex gap-2">
          
          {# "Edit" button for partial modal #}
          <button type="button" 
                  data-href="{{ app_url }}/app/categories/{{ category.id }}/edit" 
                  class="edit-category-btn px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                  Edit
          </button>
          
          {# ✅ "Delete" button for confirmation modal #}
          <form action="{{ app_url }}/app/categories/{{ category.id }}/delete" method="POST" class="delete-form">
            <button type="button" 
                    data-category-name="{{ category.name|e('html_attr') }}"
                    class="delete-category-btn px-3 py-1 text-sm bg-red-100 text-red-700 rounded-md hover:bg-red-200">
                    Delete
            </button>
          </form>
        </div>
      </li>
      {% if category.children is defined and category.children|length > 0 %}
        <li>
          {{ macros.render_categories(category.children, level + 1, app_url) }}
        </li>
      {% endif %}
    {% endfor %}
  </ul>
{% endmacro %}


{% block content %}
{# ✅ UPDATED container to match product-form.twig #}
<div class="max-w-7xl mx-auto">
  {# ✅ UPDATED header to match product-form.twig #}
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-2xl font-bold text-[#835234]">{{ title }}</h2>
    
    {# "Add New" button for partial modal #}
    <button type="button" 
       data-href="{{ app_url }}/app/categories/new"
       class="add-category-btn px-5 py-2 bg-pink-500 text-white rounded-xl font-semibold hover:bg-pink-600 transition">
       Add New Category
    </button>
  </div>

  {# ✅ UPDATED content box to match product-form.twig #}
  <div class="bg-white p-6 rounded-lg shadow-md border border-gray-200">
    {% import _self as macros %}
    {% if categories|length > 0 %}
      {{ macros.render_categories(categories, 0, app_url) }}
    {% else %}
      <p class="text-center text-gray-500">No categories found. Add one to get started!</p>
    {% endif %}
  </div>

</div>

{# --- This modal is for LOADING partial forms (Add/Edit) --- #}
<div id="categoryModal" class="hidden fixed inset-0 bg-black/40 backdrop-blur-sm z-50 flex items-center justify-center p-4">
  <div id="categoryModalBody" class="w-full max-w-2xl">
    {# Form will be injected here by JavaScript #}
  </div>
</div>

{# ✅ UPDATED SCRIPT to handle BOTH modal types safely #}
<script>
// This function will attach all our event listeners
function setupCategoryPageListeners() {
  
  // --- 1. LOGIC FOR PARTIAL MODAL (ADD/EDIT) ---
  const modal = document.getElementById("categoryModal");
  const modalBody = document.getElementById("categoryModalBody");
  
  const closeModal = () => {
    modal.classList.add("hidden");
    modalBody.innerHTML = ""; // Clear the form
  };

  const openModal = async (url) => {
    try {
      const response = await fetch(url + "?partial=true");
      if (!response.ok) throw new Error("Failed to load form.");
      
      const formHtml = await response.text();
      
      modalBody.innerHTML = formHtml;
      modal.classList.remove("hidden");
    } catch (error) {
      console.error("Error loading modal:", error);
      // Use the *other* modal to show an error
      window.showModal({
          type: "error",
          title: "Error",
          message: "Could not load the form. Please try again.",
          buttons: [{ text: "OK", variant: "cancel" }]
      });
    }
  };

  // --- Attach listener to "Add" button ---
  document.querySelector(".add-category-btn").addEventListener("click", (e) => {
    const url = e.currentTarget.dataset.href;
    openModal(url);
  });

  // --- Attach listeners to all "Edit" buttons ---
  document.querySelectorAll(".edit-category-btn").forEach(btn => {
    btn.addEventListener("click", (e) => {
      const url = e.currentTarget.dataset.href;
      openModal(url);
    });
  });

  // --- Listen for clicks to close PARTIAL modal ---
  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeModal();
    }
    // Listen for data-dismiss-modal on buttons *inside* the partial
    if (e.target.closest("[data-dismiss-modal]")) {
      e.preventDefault();
      closeModal();
    }
  });

  // --- 2. LOGIC FOR CONFIRMATION MODAL (DELETE) ---
  // (We are inside this function, so window.showModal is guaranteed to exist)
  document.querySelectorAll('.delete-category-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      
      const form = e.currentTarget.closest('form');
      const categoryName = e.currentTarget.dataset.categoryName || 'this category';
      
      window.showModal({
        type: "warning",
        title: "Confirm Deletion",
        message: `Are you sure you want to delete "${categoryName}"? This may orphan child categories.`,
        buttons: [
          {
            text: "Cancel",
            variant: "cancel"
          },
          {
            text: "Delete",
            variant: "danger",
            action: () => {
              form.submit();
            }
          }
        ]
      });
    });
  });
}

// --- This function will check if the modal service is ready. ---
function waitForModalService() {
  if (typeof window.showModal === 'function') {
    setupCategoryPageListeners();
  } else {
    console.warn("ModalService not ready, retrying in 100ms...");
    setTimeout(waitForModalService, 100);
  }
}

document.addEventListener("DOMContentLoaded", () => {
  waitForModalService();
});
</script>
{% endblock %}

