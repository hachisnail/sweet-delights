{% extends "Layouts/admin.twig" %} 

{% block content %} 
<div class="max-w-7xl mx-auto"> 

  <div class="flex justify-between items-center mb-4">
    <h2 class="text-2xl font-bold text-[#835234]">{{ title }}</h2>
  </div>

  <form id="product-form" action="{{ form_action }}" method="POST" enctype="multipart/form-data"  
        class="bg-white p-6 rounded-lg shadow-md border border-gray-200 space-y-6"> 

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6"> 
      <div> 
        <label for="name" class="block text-sm font-medium text-[#835234] mb-1">Product Name</label> 
        <input type="text" id="name" name="name" value="{{ product.name | default('') }}" required 
               class="w-full px-4 py-2 border border-pink-300 rounded-lg focus:ring-pink-500 focus:border-pink-500"> 
      </div> 
      <div> 
        <label for="category_id" class="block text-sm font-medium text-[#835234] mb-1">Category</label> 
        <select id="category_id" name="category_id" required 
                class="w-full px-4 py-2 border border-pink-300 rounded-lg focus:ring-pink-500 focus:border-pink-500 bg-white"> 
          <option value="">-- Select a Category --</option> 
          {% for cat in all_categories %} 
            <option value="{{ cat.id }}" {{ (product.category_id | default(0)) == cat.id ? 'selected' : '' }}> 
              {{ cat.indented_name | raw }} 
            </option> 
          {% endfor %} 
        </select> 
      </div> 
    </div> 
     
    <div> 
      <label for="description" class="block text-sm font-medium text-[#835234] mb-1">Description</label> 
      <textarea id="description" name="description" rows="4" 
                class="w-full px-4 py-2 border border-pink-300 rounded-lg focus:ring-pink-500 focus:border-pink-500">{{ product.description | default('') }}</textarea> 
    </div> 

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6"> 
      <div id="main-price-field"> 
        <label for="price" class="block text-sm font-medium text-[#835234] mb-1">Price (₱)</label> 
        <input type="number" id="price" name="price" value="{{ product.price | default(0) }}" required step="0.01" 
               class="w-full px-4 py-2 border border-pink-300 rounded-lg focus:ring-pink-500 focus:border-pink-500" 
               {% if product.sizes|length > 0 %}readonly{% endif %}> 
         <p class="text-xs text-gray-500 mt-1" id="price-helper"> 
           {% if product.sizes|length > 0 %}Base price is auto-set to lowest size price.{% else %}Set the price for products without sizes.{% endif %} 
         </p> 
      </div> 
       
      <div id="main-stock-field"> 
        <label for="stock" class="block text-sm font-medium text-[#835234] mb-1">Total Stock</label> 
        <input type="number" id="stock" name="stock" value="{{ product.stock | default(0) }}" 
               class="w-full px-4 py-2 border border-pink-300 rounded-lg focus:ring-pink-500 focus:border-pink-500" 
               {% if product.sizes|length > 0 %}readonly{% endif %}> 
        <p class="text-xs text-gray-500 mt-1" id="stock-helper"> 
          {% if product.sizes|length > 0 %}Stock is auto-calculated from sizes.{% else %}Only fill this if your product has no sizes.{% endif %} 
        </p> 
      </div> 
    </div> 

    <div> 
      <label for="image" class="block text-sm font-medium text-[#835234] mb-1">Product Image</label> 
      {% if product.image %} 
        <div class="flex items-center gap-4 mb-2"> 
          <img src="{{ product.image }}" onerror="this.onerror=null; this.src='/Assets/placeholder-item.png';" alt="Current Image" class="w-20 h-20 object-cover rounded-lg shadow-sm"> 
          <span class="text-gray-500 text-sm">Current image. Upload a new file below to replace it.</span> 
        </div> 
      {% endif %} 
      <input type="file" id="image" name="image" {{ product ? '' : 'required' }} 
             class="w-full text-sm text-gray-500 
                    file:mr-4 file:py-2 file:px-4 
                    file:rounded-full file:border-0 
                    file:text-sm file:font-semibold 
                    file:bg-pink-100 file:text-pink-700 
                    hover:file:bg-pink-200"> 
    </div> 
     
    <hr class="border-pink-100"> 

    <div id="sizes-container"> 
      <div class="flex justify-between items-center mb-2"> 
        <h3 class="text-lg font-semibold text-[#835234]">Sizes & Variants</h3> 
        <button type="button" id="add-size-btn"  
                class="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"> 
                + Add Size 
        </button> 
      </div> 
       
      <div id="sizes-list" class="space-y-2"> 
        <div id="size-header" class="hidden flex items-center gap-3 text-sm font-medium text-gray-500"> 
          <div class="w-1/2">Size Name</div> 
          <div class="w-1/4">Price (₱)</div> 
          <div class="w-1/4">Stock</div> 
          <div class="w-10"></div> 
        </div> 
       
        {% for size in product.sizes|default([]) %} 
          <div class="flex items-center gap-3 size-row"> 
            <input type="text" name="sizes_name[]" placeholder="Size Name" value="{{ size.name }}" class="w-1/2 px-3 py-2 border border-gray-300 rounded-lg text-sm"> 
            <input type="number" name="sizes_price[]" placeholder="Price" value="{{ size.price | default(0) }}" step="0.01" class="w-1/4 px-3 py-2 border border-gray-300 rounded-lg text-sm size-price-input"> 
            <input type="number" name="sizes_stock[]" placeholder="Stock" value="{{ size.stock }}" class="w-1/4 px-3 py-2 border border-gray-300 rounded-lg text-sm size-stock-input"> 
            <button type="button" class="remove-size-btn text-red-500 hover:text-red-700 font-bold p-1 w-10 flex-shrink-0">✕</button> 
          </div> 
        {% endfor %} 
      </div> 
    </div> 


    <div class="flex justify-end gap-3 pt-6"> 
      <button type="button" id="cancel-btn"
         class="px-5 py-2 bg-gray-200 text-gray-800 rounded-xl font-semibold hover:bg-gray-300 transition"> 
         Cancel 
      </button> 
      <button type="button" id="save-btn"
              class="px-5 py-2 bg-pink-500 text-white rounded-xl font-semibold hover:bg-pink-600 transition"> 
              Save Product 
      </button> 
    </div> 

  </form> 
</div> 

<script> 
// This function will attach all our event listeners
function setupFormListeners() {
  const sizesList = document.getElementById("sizes-list"); 
  const addSizeBtn = document.getElementById("add-size-btn"); 
  const mainStockInput = document.getElementById("stock"); 
  const stockHelper = document.getElementById("stock-helper"); 
  const mainPriceInput = document.getElementById("price"); 
  const priceHelper = document.getElementById("price-helper"); 
  const sizeHeader = document.getElementById("size-header");

  const form = document.getElementById("product-form");
  const cancelBtn = document.getElementById("cancel-btn");
  const saveBtn = document.getElementById("save-btn");

  const createSizeRow = () => { 
    const div = document.createElement("div"); 
    div.className = "flex items-center gap-3 size-row"; 
    div.innerHTML = ` 
      <input type="text" name="sizes_name[]" placeholder="Size Name" class="w-1/2 px-3 py-2 border border-gray-300 rounded-lg text-sm"> 
      <input type="number" name="sizes_price[]" placeholder="Price" value="0" step="0.01" class="w-1/4 px-3 py-2 border border-gray-300 rounded-lg text-sm size-price-input"> 
      <input type="number" name="sizes_stock[]" placeholder="Stock" value="0" class="w-1/4 px-3 py-2 border border-gray-300 rounded-lg text-sm size-stock-input"> 
      <button type="button" class="remove-size-btn text-red-500 hover:text-red-700 font-bold p-1 w-10 flex-shrink-0">✕</button>
    `; 
    sizesList.appendChild(div); 
    updateMainFieldsState(); 
  }; 

  const updateMainFieldsState = () => { 
    const sizeRows = sizesList.querySelectorAll(".size-row").length; 
    if (sizeRows > 0) { 
      mainStockInput.readOnly = true; 
      mainPriceInput.readOnly = true; 
      stockHelper.textContent = "Stock is auto-calculated from sizes."; 
      priceHelper.textContent = "Base price is auto-set to lowest size price."; 
      sizeHeader.classList.remove("hidden"); 
      calculateTotals(); 
    } else { 
      mainStockInput.readOnly = false; 
      mainPriceInput.readOnly = false; 
      stockHelper.textContent = "Only fill this if your product has no sizes."; 
      priceHelper.textContent = "Set the price for products without sizes."; 
      sizeHeader.classList.add("hidden"); 
    } 
  }; 
   
  const calculateTotals = () => { 
    let totalStock = 0; 
    let prices = []; 
    sizesList.querySelectorAll(".size-stock-input").forEach(input => { 
      totalStock += Number(input.value) || 0; 
    }); 
    sizesList.querySelectorAll(".size-price-input").forEach(input => { 
      prices.push(Number(input.value) || 0); 
    }); 
     
    mainStockInput.value = totalStock; 
    mainPriceInput.value = prices.length > 0 ? Math.min(...prices) : 0; 
  }; 

  if(addSizeBtn) {
    addSizeBtn.addEventListener("click", createSizeRow); 
  }
  if(sizesList) {
    sizesList.addEventListener("click", (e) => { 
      if (e.target.classList.contains("remove-size-btn")) { 
        e.target.closest(".size-row").remove(); 
        updateMainFieldsState(); 
      } 
    }); 
    
    sizesList.addEventListener("input", (e) => { 
      if (e.target.classList.contains("size-stock-input") || e.target.classList.contains("size-price-input")) { 
        calculateTotals(); 
      } 
    }); 
  }
  
  if (cancelBtn) {
    cancelBtn.addEventListener("click", (e) => {
      e.preventDefault();
      window.showModal({
        type: "warning",
        title: "Confirm Cancel",
        message: "Are you sure you want to cancel? Any unsaved changes will be lost.",
        buttons: [
          { text: "Stay", variant: "cancel" },
          { 
            text: "Leave", 
            variant: "danger", 
            action: () => {
              window.location.href = "{{ app_url }}/app/products";
            }
          }
        ]
      });
    });
  }

  if (saveBtn && form) {
    saveBtn.addEventListener("click", (e) => {
      e.preventDefault();
      
      if (!form.checkValidity()) {
          window.showModal({
            type: "error",
            title: "Missing Information",
            message: "Please fill out all required fields (like Product Name and Category) before saving.",
            buttons: [{ text: "OK", variant: "cancel" }]
          });
          // Show native validation errors
          form.reportValidity();
          return;
      }

      window.showModal({
        type: "info",
        title: "Confirm Save",
        message: "Are you sure you want to save these changes?",
        buttons: [
          { text: "Cancel", variant: "cancel" },
          { 
            text: "Save", 
            variant: "primary", 
            action: () => {
              form.submit();
            }
          }
        ]
      });
    });
  }

  updateMainFieldsState(); 
}

// --- This function will check if the modal service is ready. ---
function waitForModalService() {
  if (typeof window.showModal === 'function') {
    setupFormListeners();
  } else {
    console.warn("ModalService not ready, retrying in 100ms...");
    setTimeout(waitForModalService, 100);
  }
}

document.addEventListener("DOMContentLoaded", () => {
  waitForModalService();
});
</script> 
{% endblock %}

