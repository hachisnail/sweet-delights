{% extends "Layouts/admin.twig" %}

{% block content %}
<div class="max-w-7xl mx-auto">
  <div class="flex flex-col md:flex-row justify-between md:items-center gap-4 mb-4">
    <h2 class="text-2xl font-bold text-[#835234]">{{ title }}</h2>
    <a href="{{ app_url }}/app/products/new" 
       class="px-5 py-2 bg-pink-500 text-white rounded-xl font-semibold hover:bg-pink-600 transition text-center">
       Add New Product
    </a>
  </div>

  <!-- ✅ START: Search & Filter Form -->
  <div class="bg-white p-4 rounded-lg shadow-md shadow-gray-400 border border-gray-200 mb-6">
    <form method="GET" action="{{ app_url }}/app/products" class="grid grid-cols-1 md:grid-cols-3 gap-4">
      <!-- Search Input -->
      <div>
        <label for="search" class="block text-sm font-medium text-gray-700">Search by Name</label>
        <input type="search" name="search" id="search" value="{{ search_term|default('') }}" 
               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-pink-500 focus:border-pink-500 text-sm"
               placeholder="E.g. Red Velvet...">
      </div>
      
      <!-- Category Filter -->
      <div>
        <label for="category" class="block text-sm font-medium text-gray-700">Filter by Category</label>
        <select name="category" id="category" 
                class="mt-1 block w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-pink-500 focus:border-pink-500 text-sm">
          <option value="">All Categories</option>
          {% for cat in all_categories %}
            <option value="{{ cat.id }}" {{ category_filter == cat.id ? 'selected' : '' }}>
              {{ cat.indented_name|raw }}
            </option>
          {% endfor %}
        </select>
      </div>

      <!-- Buttons -->
      <div class="flex items-end gap-3">
        <button type="submit"
                class="w-full md:w-auto px-4 py-2 bg-[#835234] text-white text-sm font-medium rounded-md hover:bg-[#6d412a] transition">
          Filter
        </button>
        <a href="{{ app_url }}/app/products"
           class="w-full md:w-auto px-4 py-2 bg-gray-200 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-300 transition text-center">
          Clear
        </a>
      </div>
    </form>
  </div>
  <!-- ✅ END: Search & Filter Form -->

  <!-- ✅ START: Card Grid Layout -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
    {% for product in products %}
      <div class="product-card bg-white rounded-lg shadow-md shadow-gray-400 border border-gray-200 flex flex-col overflow-hidden"
           data-name="{{ product.name|lower }}"
           data-category-id="{{ product.category_id }}">
        
        <!-- Card Image -->
        <div class="aspect-w-16 aspect-h-9">
          <img src="{{ product.image }}" alt="{{ product.name }}" 
               onerror="this.onerror=null; this.src='/Assets/placeholder-item.png';" 
               class="h-60 w-full object-cover">
        </div>

        <!-- Card Content -->
        <div class="p-4 flex-grow">
          <h3 class="text-lg font-bold text-[#835234] mb-1 truncate">{{ product.name }}</h3>
          <p class="text-sm text-gray-500 mb-3">{{ product.category_name }}</p>
          
          <div class="flex justify-between items-center">
            <span class="text-lg font-semibold text-pink-600">₱{{ product.price|number_format(2) }}</span>
            <span class="text-sm font-medium 
              {% if product.stock > 10 %} text-green-600 
              {% elseif product.stock > 0 %} text-yellow-600 
              {% else %} text-red-600 {% endif %}">
              {{ product.stock }} in stock
            </span>
          </div>
        </div>

        <!-- Card Actions -->
        <div class="p-4 bg-gray-50 border-t border-gray-200 flex gap-2">
          <a href="{{ app_url }}/app/products/{{ product.id }}/edit" 
             class="flex-1 px-3 py-1 text-sm text-center bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition">
             Edit
          </a>
          <form action="{{ app_url }}/app/products/{{ product.id }}/delete" method="POST" class="delete-form flex-1">
            <button type="button" 
                    data-product-name="{{ product.name|e('html_attr') }}"
                    class="delete-product-btn w-full px-3 py-1 text-sm bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition">
                    Delete
            </button>
          </form>
        </div>
      </div>
    {% else %}
      <div class="col-span-full text-center text-gray-500 py-10">
        <p class="text-lg">No products found.</p>
        <p>Your search or filter criteria returned no results.</p>
      </div>
    {% endfor %}
  </div>
  <!-- ✅ END: Card Grid Layout -->
</div>

{# ✅ SCRIPT (No changes, but required for modal) #}
<script>
// This function will attach all our event listeners
function setupProductPageListeners() {
  document.querySelectorAll('.delete-product-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault();
      
      const form = e.currentTarget.closest('form');
      const productName = e.currentTarget.dataset.productName || 'this product';
      
      window.showModal({
        type: "warning",
        title: "Confirm Deletion",
        message: `Are you sure you want to delete "${productName}"? This action cannot be undone.`,
        buttons: [
          {
            text: "Cancel",
            variant: "cancel"
          },
          {
            text: "Delete",
            variant: "danger",
            action: () => {
              form.submit();
            }
          }
        ]
      });
    });
  });
}

// --- This function will check if the modal service is ready. ---
function waitForModalService() {
  if (typeof window.showModal === 'function') {
    // The service is ready! Run our setup.
    setupProductPageListeners();
  } else {
    // The service is not ready. Check again in 100ms.
    console.warn("ModalService not ready, retrying in 100ms...");
    setTimeout(waitForModalService, 100);
  }
}

// We still wait for DOMContentLoaded to make sure the *buttons* we want
// to attach listeners to are present.
document.addEventListener("DOMContentLoaded", () => {
  // Start checking for the modal service.
  waitForModalService();
});
</script>
{% endblock %}

