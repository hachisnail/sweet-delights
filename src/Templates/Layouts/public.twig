<!DOCTYPE html>
<html lang="en" class="snap-y snap-mandatory">
<head>
  <meta charset="UTF-8">
  <title>{{ title|default('FlourEver') }}</title>
  <link rel="icon" type="image/png" href="/Assets/favicon.png">
  <link href="/css/output.css" rel="stylesheet">

  <script src="/js/modal.js"></script>
  <script>
    window.AUTH_STATE = {
      isLoggedIn: {{ user ? 'true' : 'false' }},
      initialCart: {{ (user.cart ?? [])|json_encode|raw }},
      initialFavs: {{ (user.favourites ?? [])|json_encode|raw }}
    };
  </script>
  <script src="/js/CartService.js"></script>
  <script src="/js/FavouriteService.js"></script>

</head>
<body class="bg-pink-50 text-gray-900 relative ">

  {% if not hideHeader %}
    {% include 'Components/header.twig' %}
  {% endif %}

  <main class="flex flex-col">
    {% block content %}{% endblock %}
  </main>

  {% include 'Components/footer.twig' %}
  {% include 'Components/sidebar-favourite.twig' %}
  {% include 'Components/sidebar-cart.twig' %}
  {% include 'Components/modal.twig' %}

  <div id="overlay" class="hidden fixed inset-0 bg-black/40 backdrop-blur-sm transition-opacity z-40"></div>

  <script>
    // --- History API patch ---
    (function(history) {
      const pushState = history.pushState;
      history.pushState = function() {
        const result = pushState.apply(this, arguments);
        window.dispatchEvent(new Event('pushstate')); 
        return result;
      };
      const replaceState = history.replaceState;
      history.replaceState = function() {
        const result = replaceState.apply(this, arguments);
        window.dispatchEvent(new Event('replacestate'));
        return result;
      };
    })(window.history);
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // --- Elements (for layout only) ---
      const favouriteBtn = document.getElementById("favouriteBtn"); 
      const cartBtn = document.getElementById("cartBtn");
      const favouriteSidebar = document.getElementById("favouriteSidebar"); 
      const cartSidebar = document.getElementById("cartSidebar");
      const overlay = document.getElementById("overlay");
      const userMenuBtn = document.getElementById("userMenuBtn");
      const userDropdown = document.getElementById("userDropdown");

      // --- Helpers (for layout only) ---
      function closeAllSidebars() {
        favouriteSidebar?.classList.add("translate-x-full"); 
        cartSidebar?.classList.add("translate-x-full");
        userDropdown?.classList.add("hidden");
        overlay?.classList.add("hidden");
      }

      // --- 3. INITIALIZE SERVICES ---
      window.cartService = new CartService();
      window.favouriteService = new FavouriteService();
      
      window.cartService.init();
      window.favouriteService.init();

      // --- âœ… 2. DISPATCH "SERVICES READY" EVENT ---
      // This tells page-specific scripts that it's safe to run.
      window.dispatchEvent(new Event('servicesReady'));

      // --- Sidebar toggles (Keep this) ---
      function toggleSidebar(btn, sidebar, e) {
        e.stopPropagation();
        const isOpen = !sidebar.classList.contains("translate-x-full");
        closeAllSidebars();
        if (!isOpen) {
          sidebar?.classList.remove("translate-x-full");
          overlay?.classList.remove("hidden");
        }
      }
      function toggleDropdown(btn, dropdown, e) {
        e.stopPropagation();
        const isOpen = !dropdown.classList.contains("hidden");
        closeAllSidebars();
        if (!isOpen) dropdown?.classList.remove("hidden");
      }

      favouriteBtn?.addEventListener("click", (e) => toggleSidebar(favouriteBtn, favouriteSidebar, e));
      cartBtn?.addEventListener("click", (e) => toggleSidebar(cartBtn, cartSidebar, e));
      userMenuBtn?.addEventListener("click", (e) => toggleDropdown(userMenuBtn, userDropdown, e));
      overlay?.addEventListener("click", closeAllSidebars);

      window.addEventListener("click", (e) => {
        if (userDropdown && !userDropdown.classList.contains("hidden")) {
          if (!userMenuBtn.contains(e.target) && !userDropdown.contains(e.target)) {
            userDropdown.classList.add("hidden");
          }
        }
      });

      // --- LOGOUT BUTTON LOGIC ---
      const logoutBtn = document.querySelector('a[href="/logout"]');
      if (logoutBtn) {
          logoutBtn.addEventListener('click', (e) => {
              e.preventDefault();
              localStorage.removeItem('cart');
              localStorage.removeItem('favourite');
              window.location.href = '/logout';
          });
      }

      // --- Navigation Changes (Keep this) ---
      function handleNavigation() {
        closeAllSidebars(); 
      }
      window.addEventListener('popstate', handleNavigation);
      window.addEventListener('pushstate', handleNavigation);
      window.addEventListener('replacestate', handleNavigation);

      // --- Cross-tab sync (Keep this) ---
      window.addEventListener("storage", (e) => {
        if (e.key === "cart" || e.key === "favourite") {
          window.cartService.init();
          window.favouriteService.init();
        }
      });
    });
  </script>

</body>
</html>