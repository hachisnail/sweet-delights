{% extends "Layouts/public.twig" %}

{% block content %}
<!-- ✅ PRODUCT DETAIL PAGE -->
<div class="max-w-4xl mx-auto mt-10 p-6 bg-white rounded-2xl shadow-lg border border-pink-100"
     data-product-id="{{ product.id }}"
     data-product-name="{{ product.name }}"
     data-product-price="{{ product.price }}"
     data-product-image="{{ product.image }}"
     data-product-stock="{{ product.stock }}"
     data-product-sizes='{{ product.sizes|json_encode|raw }}'>

  <div class="flex flex-col md:flex-row gap-8">
    <!-- Product Image -->
    <div class="md:w-1/2 flex justify-center">
      <img src="{{ product.image }}" alt="{{ product.name }}"
           class="rounded-xl w-full max-w-sm object-cover shadow-md shadow-pink-100">
    </div>

    <!-- Product Info -->
    <div class="md:w-1/2 flex flex-col justify-between">
      <div>
        <h1 class="text-3xl font-bold text-[#835234] mb-2">{{ product.name }}</h1>
        <p class="text-sm text-pink-600 font-semibold mb-2">{{ product.category }}</p>
        <p class="text-gray-600 mb-4 text-lg">₱{{ product.price }}</p>
        <p class="text-gray-700 mb-6 leading-relaxed">{{ product.description }}</p>

        {% if product.sizes is defined and product.sizes|length > 0 %}
          <div class="mb-4">
            <p class="font-semibold text-[#835234] mb-1">Available Sizes:</p>
            <div id="sizeSelector" class="flex gap-2 flex-wrap">
              {% for size in product.sizes %}
                <button 
                  type="button"
                  data-size="{{ size.name }}"
                  data-stock="{{ size.stock }}"
                  class="size-btn px-3 py-1 bg-pink-100 text-pink-700 rounded-lg text-sm hover:bg-pink-200 focus:outline-none transition">
                  {{ size.name }} ({{ size.stock }})
                </button>
              {% endfor %}
            </div>
            <div id="sizeWarning" class="hidden flex items-center gap-2 mt-1 text-red-500 text-xs">
              <svg xmlns="http://www.w3.org/2000/svg" 
                  width="16" height="16" viewBox="0 0 24 24" fill="none" 
                  stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" 
                  class="lucide lucide-triangle-alert flex-shrink-0">
                <path d="m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"/>
                <path d="M12 9v4"/>
                <path d="M12 17h.01"/>
              </svg>
              <p>Please select a size before adding to cart.</p>
            </div>

          </div>
        {% endif %}

        <p class="text-sm text-gray-500 mt-4">Total Stock: {{ product.stock }}</p>
      </div>

      <!-- Quantity + Buttons -->
      <div class="mt-6 flex flex-col gap-3">
        <div class="flex items-center gap-3">
          <label class="text-[#835234] font-semibold">Quantity:</label>
          <div class="flex items-center border rounded-lg overflow-hidden">
            <button id="decreaseQty" class="px-3 py-1 bg-pink-100 hover:bg-pink-200">−</button>
            <input id="quantityInput" type="number" value="1" min="1" max="{{ product.stock }}"
                   class="w-16 text-center border-l border-r outline-none">
            <button id="increaseQty" class="px-3 py-1 bg-pink-100 hover:bg-pink-200">+</button>
          </div>
        </div>

        <div class="flex gap-3">
          <button id="addToCartBtn" 
                  class="flex-1 bg-[#835234] hover:bg-[#6d412a] text-white py-2 rounded-xl transition">
            Add to Cart
          </button>
          <button id="addToFavouriteBtn" 
                  class="bg-pink-100 hover:bg-pink-200 text-[#835234] p-2 rounded-xl transition relative">
            <svg id="heartIcon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" 
                 viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" 
                 stroke-linecap="round" stroke-linejoin="round" 
                 class="lucide lucide-heart transition-all duration-300">
              <path d="M19.5 12.571 12 20l-7.5-7.429A5 5 0 0 1 12 6a5 5 0 0 1 7.5 6.571Z"/>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
/* Simple shake animation for size warning */
@keyframes shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-4px); }
  75% { transform: translateX(4px); }
}
.shake {
  animation: shake 0.3s ease-in-out;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const container = document.querySelector("[data-product-id]");
  if (!container) return;

  const qtyInput = document.getElementById("quantityInput");
  const decBtn = document.getElementById("decreaseQty");
  const incBtn = document.getElementById("increaseQty");
  const sizeButtons = Array.from(document.querySelectorAll("[data-size]"));
  const sizeWarning = document.getElementById("sizeWarning");
  const sizeSelector = document.getElementById("sizeSelector");
  const addToCartBtn = document.getElementById("addToCartBtn");
  const addToFavouriteBtn = document.getElementById("addToFavouriteBtn");
  const heartIcon = document.getElementById("heartIcon");

  const product = {
    id: Number(container.dataset.productId),
    name: container.dataset.productName,
    price: Number(container.dataset.productPrice),
    image: container.dataset.productImage,
    stock: Number(container.dataset.productStock || "1"),
    sizes: JSON.parse(container.dataset.productSizes || "[]"),
  };

  let selectedSize = null;
  let selectedStock = 0;

  // --- Storage helpers ---
  const readCart = () => JSON.parse(localStorage.getItem("cart") || "[]");
  const writeCart = (cart) => {
    localStorage.setItem("cart", JSON.stringify(cart));
    window.dispatchEvent(new Event("cartChanged"));
  };

  const readFav = () => JSON.parse(localStorage.getItem("favourite") || "[]");
  const writeFav = (fav) => {
    localStorage.setItem("favourite", JSON.stringify(fav));
    window.dispatchEvent(new Event("favouritesChanged"));
  };

  // --- Heart UI ---
  const updateHeartUI = () => {
    const fav = readFav();
    const inFav = fav.some(p => p.id === product.id);
    if (inFav) {
      heartIcon.classList.add("fill-current", "text-pink-600");
    } else {
      heartIcon.classList.remove("fill-current", "text-pink-600");
    }
  };

  // --- Helpers ---
  const getAvailableStockForSelectedSize = () => {
    if (!selectedSize) return 0;
    const sizeData = product.sizes.find(s => s.name === selectedSize);
    const baseStock = sizeData ? Number(sizeData.stock) : 0;
    const cart = readCart();
    const existing = cart.find(
      p => Number(p.id) === product.id && (p.selectedSize ?? null) === (selectedSize ?? null)
    );
    const existingQty = existing ? Number(existing.quantity || 0) : 0;
    return Math.max(0, baseStock - existingQty);
  };

  const refreshQuantityUI = () => {
    const available = getAvailableStockForSelectedSize();

    if (product.sizes.length > 0 && !selectedSize) {
      addToCartBtn.classList.add("opacity-60", "cursor-not-allowed");
      addToCartBtn.dataset.disabled = "true";
      return;
    }

    addToCartBtn.classList.remove("opacity-60", "cursor-not-allowed");
    addToCartBtn.dataset.disabled = "false";

    if (available <= 0) {
      addToCartBtn.classList.add("opacity-60", "cursor-not-allowed");
      addToCartBtn.dataset.disabled = "true";
    }

    decBtn.disabled = Number(qtyInput.value) <= 1;
    incBtn.disabled = Number(qtyInput.value) >= available;
  };



  // --- Size selection ---
  sizeButtons.forEach(btn => {
    btn.addEventListener("click", () => {
      sizeButtons.forEach(b => b.classList.remove("bg-[#835234]", "text-white", "ring-2", "ring-[#835234]"));
      sizeButtons.forEach(b => b.classList.add("bg-pink-100", "text-pink-700"));

      btn.classList.remove("bg-pink-100", "text-pink-700");
      btn.classList.add("bg-[#835234]", "text-white", "ring-2", "ring-[#835234]");

      selectedSize = btn.dataset.size;
      selectedStock = Number(btn.dataset.stock);
      sizeWarning.classList.add("hidden");
      qtyInput.value = 1;
      refreshQuantityUI();
    });
  });

  // --- Auto-select single size ---
  if (product.sizes.length === 1) {
    const onlySizeBtn = sizeButtons[0];
    onlySizeBtn.click();
  }

  // --- Quantity buttons ---
  decBtn.addEventListener("click", () => {
    qtyInput.value = Math.max(1, Number(qtyInput.value) - 1);
    refreshQuantityUI();
  });

  incBtn.addEventListener("click", () => {
    const available = getAvailableStockForSelectedSize();
    qtyInput.value = Math.min(Number(qtyInput.value) + 1, available);
    refreshQuantityUI();
  });

  qtyInput.addEventListener("input", refreshQuantityUI);

  // --- Add to Cart ---
  addToCartBtn.addEventListener("click", () => {
    if (product.sizes.length > 0 && !selectedSize) {
      sizeWarning.classList.remove("hidden");
      sizeSelector.classList.add("shake");
      setTimeout(() => sizeSelector.classList.remove("shake"), 300);
      return;
    }

    const cart = readCart();
    const existingItem = cart.find(
      (p) => p.id === product.id && p.selectedSize === selectedSize
    );

    const availableStock = getAvailableStockForSelectedSize();

    if (existingItem && existingItem.quantity >= selectedStock) {
      window.showModal({
        type: "warning",
        title: "Maximum Reached",
        message: `You’ve already added the maximum available stock for ${product.name}${selectedSize ? " (" + selectedSize + ")" : ""}.`,
        buttons: [{ text: "OK", variant: "cancel" }],
      });
      return;
    }

    if (availableStock <= 0) {
      window.showModal({
        type: "warning",
        title: "Out of Stock",
        message: `No more stock for ${product.name}${selectedSize ? " (" + selectedSize + ")" : ""}.`,
        buttons: [{ text: "OK", variant: "cancel" }],
      });
      return;
    }

    const requested = Math.min(Number(qtyInput.value) || 1, availableStock);

    if (existingItem) {
      const newQty = Math.min(existingItem.quantity + requested, selectedStock);
      if (newQty === existingItem.quantity) {
        window.showModal({
          type: "warning",
          title: "Maximum Reached",
          message: `You already have the maximum number of ${product.name}${selectedSize ? " (" + selectedSize + ")" : ""} in your cart.`,
          buttons: [{ text: "OK", variant: "cancel" }],
        });
        return;
      }

      existingItem.quantity = newQty;

      window.showModal({
        type: "success",
        title: "Cart Updated",
        message: `${product.name}${selectedSize ? " (" + selectedSize + ")" : ""} quantity updated to ${newQty}.`,
        buttons: [{ text: "OK", variant: "confirm" }],
      });
    } else {
      cart.push({
        id: product.id,
        name: product.name,
        image: product.image,
        price: product.price,
        selectedSize,
        quantity: requested,
        stock: selectedStock,
      });

      window.showModal({
        type: "success",
        title: "Added to Cart",
        message: `${product.name}${selectedSize ? " (" + selectedSize + ")" : ""} × ${requested} added successfully.`,
        buttons: [{ text: "OK", variant: "confirm" }],
      });
    }

    writeCart(cart);

    qtyInput.value = 1;
    selectedSize = null;
    selectedStock = 0;

    sizeButtons.forEach(b => {
      b.classList.remove("bg-[#835234]", "text-white", "ring-2", "ring-[#835234]");
      b.classList.add("bg-pink-100", "text-pink-700");
    });

    refreshQuantityUI();
  });



  // --- Favourites toggle ---
  addToFavouriteBtn.addEventListener("click", () => {
    const fav = readFav();
    const index = fav.findIndex(p => p.id === product.id);

    if (index === -1) {
      fav.push({
        id: product.id,
        name: product.name,
        image: product.image,
        price: product.price,
      });
      writeFav(fav);
      window.showModal({
        type: "success",
        title: "Added to Favourites",
        message: `${product.name} has been added to your favourites.`,
        buttons: [{ text: "OK", variant: "confirm" }],
      });
    } else {
      fav.splice(index, 1);
      writeFav(fav);
      window.showModal({
        type: "info",
        title: "Removed from Favourites",
        message: `${product.name} has been removed from your favourites.`,
        buttons: [{ text: "OK", variant: "cancel" }],
      });
    }
    updateHeartUI();
  });

  // --- Sync UI ---
  window.addEventListener("favouritesChanged", updateHeartUI);
  window.addEventListener("cartChanged", refreshQuantityUI);
  window.addEventListener("storage", () => {
    refreshQuantityUI();
    updateHeartUI();
  });

  refreshQuantityUI();
  updateHeartUI();
});
</script>
{% endblock %}
