{% extends "Layouts/public.twig" %}

{% block content %}
<div class="max-w-4xl mx-auto mt-10 p-6 bg-white rounded-2xl shadow-lg border border-pink-100">
  <div class="flex flex-col md:flex-row gap-8">
    <div class="md:w-1/2 flex justify-center">
      <img src="{{ product.image }}" alt="{{ product.name }}" class="rounded-xl w-full max-w-md shadow-md">
    </div>

    <div class="md:w-1/2 flex flex-col justify-center">
      <h1 class="text-3xl font-bold text-[#835234] mb-2">{{ product.name }}</h1>
      <p class="text-gray-600 mb-4 text-lg">₱{{ product.price }}</p>
      <p class="text-gray-700 mb-6 leading-relaxed">
        A delicious {{ product.name }} baked with love — perfect for every sweet tooth!
      </p>

      <p class="text-sm text-gray-500 mb-4">Available stock: {{ product.stock }}</p>

      <div class="flex items-center gap-3 mb-6">
        <button id="decreaseQty"
          class="w-8 h-8 rounded-lg bg-[#f3d9d1] text-[#835234] font-bold hover:bg-[#eac0b0] transition">−</button>

        <input id="quantityInput" type="number" min="1" max="{{ product.stock }}" value="1"
          class="w-16 border border-gray-300 rounded-lg text-center font-semibold text-[#835234]">

        <button id="increaseQty"
          class="w-8 h-8 rounded-lg bg-[#f3d9d1] text-[#835234] font-bold hover:bg-[#eac0b0] transition">+</button>
      </div>

      <div class="flex gap-2">
        <button id="addToFavouriteBtn"
          class=" text-white font-semibold transition">
          <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 26 26" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-pink-500 hover:text-pink-600 lucide lucide-heart-icon lucide-heart"><path d="M2 9.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5c0 2.29-1.5 4-3 5.5l-5.492 5.313a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5"/></svg>
        </button>

        <button id="addToCartBtn"
          class="px-6 py-2 bg-[#b06f52] hover:bg-[#a26046] text-white font-semibold rounded-xl transition">
          Add to Cart
        </button>
      </div>

      <a href="/products"
        class="mt-6 inline-block px-6 py-2 bg-gray-200 text-gray-800 font-semibold rounded-xl hover:bg-gray-300 transition">
        Back to Products
      </a>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const product = {
      id: "{{ product.id }}",
      name: "{{ product.name }}",
      price: {{ product.price }},
      image: "{{ product.image }}",
      stock: {{ product.stock }}
    };

    const quantityInput = document.getElementById("quantityInput");
    const decreaseBtn = document.getElementById("decreaseQty");
    const increaseBtn = document.getElementById("increaseQty");
    const addToCartBtn = document.getElementById("addToCartBtn");
    const addToFavouriteBtn = document.getElementById("addToFavouriteBtn");

    // --- Get the heart icon element ---
    const favouriteIcon = document.querySelector("#addToFavouriteBtn svg");

    // --- Cart/Quantity Logic ---
    const getAvailableStock = () => {
      const cart = JSON.parse(localStorage.getItem("cart") || "[]");
      const existing = cart.find(item => item.id === product.id);
      return product.stock - (existing?.quantity || 0);
    };

    const updateQuantityInput = (value) => {
      const max = getAvailableStock();
      // Ensure value is at least 1 and not more than max stock
      const validValue = Math.min(Math.max(1, value), max);
      
      // Handle case where max stock is 0
      if (max <= 0) {
        quantityInput.value = 0;
      } else {
        quantityInput.value = validValue;
      }
    };

    // Initialize quantity input based on existing cart
    updateQuantityInput(parseInt(quantityInput.value) || 1);

    // Quantity controls
    decreaseBtn.addEventListener("click", () => {
      updateQuantityInput(parseInt(quantityInput.value) - 1);
    });

    increaseBtn.addEventListener("click", () => {
      updateQuantityInput(parseInt(quantityInput.value) + 1);
    });

    quantityInput.addEventListener("input", () => {
      updateQuantityInput(parseInt(quantityInput.value) || 1);
    });

    // --- Add to Cart Logic ---
    addToCartBtn.addEventListener("click", () => {
      const cart = JSON.parse(localStorage.getItem("cart") || "[]");
      const availableStock = getAvailableStock();
      let quantity = Math.min(parseInt(quantityInput.value) || 1, availableStock);

      if (quantity <= 0) {
        showModal({
          type: "warning",
          title: "No Stock Available",
          message: `No more stock available for ${product.name}.`,
          buttons: [{ text: "OK", variant: "cancel" }]
        });
        return;
      }

      let existing = cart.find(item => item.id === product.id);
      if (existing) {
        existing.quantity += quantity;
      } else {
        cart.push({ ...product, quantity });
      }

      localStorage.setItem("cart", JSON.stringify(cart));
      window.renderCart?.(); // Update cart sidebar
      window.updateCartAndFavouriteCounts?.(); // Update header count

      showModal({
        type: "success",
        title: "Added to Cart",
        message: `${quantity} × ${product.name} added to your cart!`,
        buttons: [{ text: "OK", variant: "primary" }]
      });

      // Reset quantity input
      updateQuantityInput(1);
    });
    
    // --- Favourites Logic ---
    
    // Function to check and set heart fill state
    const checkFavouriteStatus = () => {
      const favourite = JSON.parse(localStorage.getItem("favourite") || "[]");
      if (favourite.find(item => item.id === product.id)) {
        // Item IS in favourites, so fill the heart.
        favouriteIcon.setAttribute("fill", "currentColor");
      } else {
        // Item is NOT in favourites, so make it an outline.
        favouriteIcon.setAttribute("fill", "none");
      }
    };

    // Set initial heart state on page load
    checkFavouriteStatus();

    // Favourites button now toggles (adds/removes)
    addToFavouriteBtn.addEventListener("click", () => {
      let favourite = JSON.parse(localStorage.getItem("favourite") || "[]");
      const existingIndex = favourite.findIndex(item => item.id === product.id);

      if (existingIndex === -1) {
        // Item not found, so ADD it
        favourite.push(product);
        localStorage.setItem("favourite", JSON.stringify(favourite));

        showModal({
          type: "success",
          title: "Added to Favourites",
          message: `${product.name} has been added to your favourites!`,
          buttons: [{ text: "OK", variant: "primary" }]
        });
      } else {
        // Item found, so REMOVE it
        favourite.splice(existingIndex, 1);
        localStorage.setItem("favourite", JSON.stringify(favourite));

        showModal({
          type: "info",
          title: "Removed from Favourites",
          message: `${product.name} has been removed from your favourites.`,
          buttons: [{ text: "Close", variant: "cancel" }]
        });
      }
      
      // Update global UI
      window.renderFavourite?.(); // Update favourite sidebar
      window.updateCartAndFavouriteCounts?.(); // Update header count

      // Notify the whole page (including this script) that favourites changed
      window.dispatchEvent(new Event("favouritesChanged"));
    });

    // Listen for the event from anywhere (sidebar, this page, etc.)
    // and update this page's heart icon.
    window.addEventListener("favouritesChanged", checkFavouriteStatus);
  });
</script>

{% endblock %}